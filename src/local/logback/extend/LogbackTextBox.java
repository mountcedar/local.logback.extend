/**
 *
 */
package local.logback.extend;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import local.logback.extend.LogbackTextPane.Status;

/** Creates a UI to display log messages from a SwingAppender
 * @author pshah
 *
 */
public class LogbackTextBox extends JPanel {
	private static final long serialVersionUID = 1567960700479322213L;

	/** for logging */
	protected static Logger logger = LoggerFactory.getLogger(LogbackTextBox.class);

	public static enum ButtonTitle {
		START("start"), PAUSE("pause"), STOP("stop"), CLEAR("clear");
		public String title = null;
		private ButtonTitle(String title) {
			this.title = title;
		}
	};

	/* Constants */
	public static final String STYLE_REGULAR = "regular";
	public static final String STYLE_HIGHLIGHTED = "highlighted";

	protected LogbackTextPane logMessagesDisp; //display area
	protected JScrollPane scrollPane;
	//buffer to hold log statements when the UI is set to PAUSE

	/**
	 * Private constructer to ensure that this object cannot e instantiated
	 * from outside this class.
	 */
	public LogbackTextBox(LogbackTextPane disp) {
		this.logMessagesDisp = disp;
		//set internal attributes
		//create text area to hold the log messages
		initMessageDispArea();
		//add components to the contentPane
		this.setLayout(new BorderLayout());
		this.add(BorderLayout.NORTH, new ButtonPanel(logMessagesDisp));
		this.add(BorderLayout.CENTER, scrollPane);
	}

	/**Displays the log in the text area unless dispMsg is set to false in which
	 * case it adds the log to a buffer. When dispMsg becomes true, the buffer
	 * is first flushed and it's contents are displayed in the text area.
	 * @param log The log message to be displayed in the text area
	 */
	public void doLog(String log) { logMessagesDisp.write(log); }

	/**
	 * Creates a scrollable text area
	 */
	private void initMessageDispArea() {
		scrollPane = new JScrollPane(logMessagesDisp);
		logMessagesDisp.setVisible(true);
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
	}

	/**************** inner classes *************************/

	public static class ButtonPanel extends JPanel {
		private static final long serialVersionUID = 4290411630410776768L;
		protected JButton startPause; //button for start/pause - toggles
		protected JButton stop; //stop button
	    protected JButton clear; //button to clear the text area
	    protected JButton search; //search button
	    protected JTextField searchField; //search field
	    protected LogbackTextPane disp = null;

		public ButtonPanel(LogbackTextPane disp) {
			super();
			this.disp = disp;

			startPause = new JButton(ButtonTitle.PAUSE.title);
			startPause.addActionListener(new StartPauseActionListener(disp));
			stop = new JButton(ButtonTitle.STOP.title);
			stop.addActionListener(new StopActionListener(startPause, disp));
	        clear = new JButton(ButtonTitle.CLEAR.title);
	        clear.addActionListener(new ClearActionListener(disp));

	        searchField = new JTextField(25);
	        search = new JButton("Search");
	        search.addActionListener(new SearchActionListener(disp));
			this.add(startPause);
			this.add(stop);
	        this.add(clear);
	        this.add(searchField);
	        this.add(search);
		};

		public static class ClearActionListener implements ActionListener {
            protected LogbackTextPane disp = null;

            public ClearActionListener(LogbackTextPane disp) {
            	this.disp = disp;
			}

			public void actionPerformed(ActionEvent evt) {
                disp.setText("");
            }
		}

		public static class StopActionListener implements ActionListener {
			protected LogbackTextPane disp = null;

			public StopActionListener(JButton button, LogbackTextPane disp) {
					this.disp = disp;
			}

			public void actionPerformed(ActionEvent evt) {
				JButton srcButton = (JButton)evt.getSource();
				disp.setState(Status.STOPPED);
				srcButton.setText(ButtonTitle.START.title);
			}

		}

		/**Accepts and responds to action events generated by the startPause
		 * button.
		 */
		public static class StartPauseActionListener implements ActionListener {
			protected LogbackTextPane disp = null;

			public StartPauseActionListener(LogbackTextPane disp) {
				this.disp = disp;
			}
			/**Toggles the value of the startPause button. Also toggles
			 * the value of dispMsg.
			 * @param evt The action event
			 */
			public void actionPerformed(ActionEvent evt) {
				JButton srcButton = (JButton)evt.getSource();
				if(srcButton.getText().equals(ButtonTitle.START.title)) {
					srcButton.setText(ButtonTitle.PAUSE.title);
					disp.setState(Status.STARTED);
				}
				else if(srcButton.getText().equals(ButtonTitle.PAUSE.title)) {
					disp.setState(Status.STOPPED);
					srcButton.setText(ButtonTitle.START.title);
				}
			}
		}

		class SearchActionListener implements ActionListener {
			protected LogbackTextPane disp = null;

			public SearchActionListener(LogbackTextPane disp) {
				this.disp = disp;
			}

			public void actionPerformed(ActionEvent evt) {
				JButton srcButton = (JButton)evt.getSource();
				if(!"Search".equals(srcButton.getText())) {
					return;
				}
				logger.debug("Highlighting search results");
				String searchTerm = searchField.getText();
				String allLogText = disp.getText();
				int startIndex = 0;
				int selectionIndex = -1;
				Highlighter hLighter = disp.getHighlighter();
				//clear all previous highlightes
				hLighter.removeAllHighlights();
				DefaultHighlighter.DefaultHighlightPainter highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(Color.BLUE);
				while((selectionIndex = allLogText.indexOf(searchTerm, startIndex)) != -1) {
					startIndex = selectionIndex + searchTerm.length();
					try {
						int newLines = getNumberOfNewLinesTillSelectionIndex(allLogText, selectionIndex);
						hLighter.addHighlight(selectionIndex - newLines,
								(selectionIndex+searchTerm.length() - newLines),
								highlightPainter);
					} catch(BadLocationException ble) {
						logger.error("Bad Location Exception: {}", ble.getMessage());
					}
				}
			}

			private int getNumberOfNewLinesTillSelectionIndex(String allLogText, int selectionIndex) {
				int numberOfNewlines = 0;
				int pos = 0;
				while((pos = allLogText.indexOf("\n", pos))!=-1 && pos <= selectionIndex) {
					numberOfNewlines++;
					pos++;
				}
				return numberOfNewlines;
			}
		}
	};
}